-- FUNCTION: weather.search_range_geojson_polygon_05(text, text, text, text)

-- DROP FUNCTION weather.search_range_geojson_polygon_05(text, text, text, text);

CREATE OR REPLACE FUNCTION weather.search_range_geojson_polygon_05(
	fromdt text,
	todt text,
	region text,
	xypoint text)
    RETURNS json
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
	DECLARE
    sSQL text;
	apply_data_from text;
	apply_data_to text;
	maxdate text;
	limit_time text;
    resultout json; 
    apply_region text; 
BEGIN
    
      IF length(fromdt) <> 14 THEN
        RAISE EXCEPTION 'invalid from date parameter!!';
      END IF;
	  
	  IF length(todt) <> 14 THEN
        RAISE EXCEPTION 'invalid to date parameter!!';
      END IF;
      IF length(region) = 0 then
     	apply_region=xypoint;
      ELSE
     	select boundary into apply_region from weather.weather_zone_info where zone_alias=region;
      END IF;
	
      apply_data_from :=nearest_time(fromdt);
	  apply_data_to :=nearest_time(todt);
      sSQL := generate_range_sql('search_range_geojson_polygon_05',apply_data_from, apply_data_to, apply_region,0 );
	  --RAISE notice '%', sSQL;
      EXECUTE  sSQL into resultout;
	  IF length(resultout::text) < 50 THEN
	      select max(_timestamp) into maxdate from weather.weather_info;  
		  select TO_CHAR(TO_TIMESTAMP(maxdate, 'YYYYMMDDHH24') + interval '3 hour','YYYYMMDDHH24MISS') into limit_time;
		
		  IF fromdt <= limit_time THEN
		  	  sSQL := generate_range_sql('search_range_geojson_polygon_05',apply_data_from,maxdate, apply_region,0);
			  --raise notice '%' , limit_time;
			  EXECUTE  sSQL into resultout;
			  return resultout;
		  ELSE
		      return resultout;
		  END IF;
      ELSE
	    return resultout; 
	  END IF;
END ;
$BODY$;

ALTER FUNCTION weather.search_range_geojson_polygon_05(text, text, text, text)
    OWNER TO hhiweather;
