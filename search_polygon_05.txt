-- FUNCTION: weather.search_polygon_05(text, text, text)

-- DROP FUNCTION weather.search_polygon_05(text, text, text);

CREATE OR REPLACE FUNCTION weather.search_polygon_05(
	fromdt text,
	region text,
	xypoint text)
    RETURNS TABLE(_timestamp character varying, longitude numeric, latitude numeric, u_wind numeric, v_wind numeric, wave_height numeric, wave_direction numeric, wave_period numeric, swell_height numeric, swell_direction numeric, swell_period numeric, ice_cover numeric, u_current numeric, v_current numeric, water_temperature numeric, pressure numeric, air_temperature numeric) 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 100000
AS $BODY$
	declare
    sSQL text;
    apply_time text;
	maxdate text;
	limit_time text;
    apply_region text;
BEGIN
	  
	  IF length(fromdt) <> 14 THEN
        RAISE EXCEPTION 'invalid date parameter!!';
      END IF;
	  apply_time:=nearest_time(fromdt);
     
      IF length(region) = 0 then
     	apply_region=xypoint;
      ELSE
     	select boundary into apply_region from weather.weather_zone_info where zone_alias=region;
      END IF;

      sSQL := generate_sql('search_polygon_05',apply_time, apply_region,0 );
	  --RAISE notice '%', sSQL;
      return  query 
      EXECUTE  sSQL;
	  IF NOT FOUND THEN
	      select max(a._timestamp) into maxdate from weather.weather_info a;  
		  select TO_CHAR(TO_TIMESTAMP(maxdate, 'YYYYMMDDHH24') + interval '3 hour','YYYYMMDDHH24MISS') into limit_time;
		
		  IF fromdt <= limit_time THEN
		  	  sSQL := generate_sql('search_polygon_05',maxdate, apply_region,0);
			  --RAISE notice '%', sSQL;
			  return  query 
              EXECUTE sSQL;  			
		  END IF;
      END IF;				
END ;
$BODY$;

ALTER FUNCTION weather.search_polygon_05(text, text, text)
    OWNER TO hhiweather;
