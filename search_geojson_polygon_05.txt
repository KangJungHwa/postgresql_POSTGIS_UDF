-- FUNCTION: weather.search_geojson_polygon_05(text, text, text)

-- DROP FUNCTION weather.search_geojson_polygon_05(text, text, text);

CREATE OR REPLACE FUNCTION weather.search_geojson_polygon_05(
	fromdt text,
	region text,
	xypoint text)
    RETURNS json
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
	DECLARE
	apply_region text;
    sSQL text;
    apply_time text;
	maxdate text;
	limit_time text;
    resultout json; 

BEGIN
    
	  IF length(fromdt) <> 14 THEN
        RAISE EXCEPTION 'invalid date parameter!!';
      END IF;
	  apply_time:=nearest_time(fromdt);

     
      IF length(region) = 0 then
     	apply_region=xypoint;
      ELSE
     	SELECT boundary into apply_region from weather.weather_zone_info where zone_alias=region;
      END IF;
	  sSQL := generate_sql('search_geojson_polygon_05',apply_time, apply_region,0 );
      EXECUTE  sSQL into resultout;
	  IF length(resultout::text) < 50 THEN
	       select max(_timestamp) into maxdate from weather.weather_info;  
		   select TO_CHAR(TO_TIMESTAMP(maxdate, 'YYYYMMDDHH24') + interval '3 hour','YYYYMMDDHH24MISS') into limit_time;
		
		  IF fromdt <= limit_time THEN
			  sSQL := generate_sql('search_geojson_polygon_05',maxdate, apply_region,0);
			  --raise notice '%' , limit_time;
			  EXECUTE  sSQL into resultout;
			  return resultout;
		  ELSE
		      return resultout;
		  END IF;
      ELSE
	      return resultout; 
	  END IF;
               
END ;
$BODY$;

ALTER FUNCTION weather.search_geojson_polygon_05(text, text, text)
    OWNER TO hhiweather;
