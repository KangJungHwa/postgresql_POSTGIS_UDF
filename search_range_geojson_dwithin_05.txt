-- FUNCTION: weather.search_range_geojson_dwithin_05(text, text, text)

-- DROP FUNCTION weather.search_range_geojson_dwithin_05(text, text, text);

CREATE OR REPLACE FUNCTION weather.search_range_geojson_dwithin_05(
	fromdt text,
	todt text,
	xypoint text)
    RETURNS json
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$
	DECLARE
    sSQL text;
	param_cnt integer;
	apply_data_from text;
	apply_data_to text;
	maxdate text;
	limit_time text;
    resultout json; 

BEGIN
    
	param_cnt:=array_length(regexp_split_to_array(xypoint::text,','),1);
	  IF param_cnt = 0 THEN
        RAISE EXCEPTION 'invalid point parameter!!';
      END IF;
	  
	  IF length(fromdt) <> 14 THEN
        RAISE EXCEPTION 'invalid from date parameter!!';
      END IF;
	  
	  IF length(todt) <> 14 THEN
        RAISE EXCEPTION 'invalid to date parameter!!';
      END IF;
	  
      apply_data_from :=nearest_time(fromdt);
	  apply_data_to :=nearest_time(todt);
      sSQL := generate_range_sql('search_range_geojson_dwithin_05',apply_data_from, apply_data_to, xypoint,param_cnt );
	  --RAISE notice '%', sSQL;
    EXECUTE  sSQL into resultout;
	IF length(resultout::text) < 50 THEN
	    select max(a._timestamp) into maxdate from weather.weather_info a;  
		select TO_CHAR(TO_TIMESTAMP(maxdate, 'YYYYMMDDHH24') + interval '3 hour','YYYYMMDDHH24MISS') into limit_time;
		
		IF fromdt <= limit_time THEN
			sSQL := generate_range_sql('search_range_geojson_dwithin_05',apply_data_from,maxdate, xypoint,param_cnt);
			--raise notice '%' , limit_time;
			EXECUTE  sSQL into resultout;
			return resultout;
		ELSE
		    return resultout;
		END IF;
    ELSE
	    return resultout; 
	END IF;
END ;
$BODY$;

ALTER FUNCTION weather.search_range_geojson_dwithin_05(text, text, text)
    OWNER TO hhiweather;
